//一些常用算法模板
1快排
void quick_sort(vector<int>& q, int l,int r){
    if(r<=l)return;
    int x=q[l],i=l-1,j=r+1;
    while(i<j){
        do i++;while(q[i]<x);
        do j--;while(q[j]>x);
        if(i<j)swap(q[i],q[j]);
    }
    quick_sort(q,l,j);
    quick_sort(q,j+1,r);

}
//2冒泡

int temp;
//记录是否发生了置换， 0 表示没有发生置换、 1 表示发生了置换
int isChange;

//外层循环是排序的趟数
for (int i = 0; i < arrays.length - 1; i++) {

     //每比较一趟就重新初始化为0
     isChange = 0;

     //内层循环是当前趟数需要比较的次数
     for (int j = 0; j < arrays.length - i - 1; j++) {

        //前一位与后一位与前一位比较，如果前一位比后一位要大，那么交换
            if (arrays[j] > arrays[j + 1]) {
                temp = arrays[j];
                arrays[j] = arrays[j + 1];
                arrays[j + 1] = temp;

                //如果进到这里面了，说明发生置换了
                isChange = 1;

            }
        }
        //如果比较完一趟没有发生置换，那么说明已经排好序了，不需要再执行下去了
        if (isChange == 0) {
            break;
        }
    }
//归并排序
void merge_sort(vector<int> &q,int l,int r){
    if(l>=r)return;
    int mid=l+r>>1;
    merge_sort(q,l,mid);
    mergr_sort(q,mid+1,r);
    merge(q,l,r,mid+1)//mid+1代表是右边部分开始位置

}
void merge(vector<int> &q,int l,int r,int mid){
    int i=l,j=mid,p=l;
    while(i<mid)&&j<=r){
        if(a[i]<a[j])temp[p++]=q[i++];
        else temp[p++]=q[j++];
    }
    while(i<mid)temp[p++]=a[i++];
    while(j<=r)temp[p++]=a[j++];
    p=l,i=l;
    while(p<=r)a[i++]=temp[p++];
}

2 二分的基本思想
2.1 70%的二分都与单调性有关
2.2 95%的二分都是数据存在二段性质